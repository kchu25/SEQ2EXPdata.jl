var documenterSearchIndex = {"docs":
[{"location":"#SEQ2EXPdata","page":"Home","title":"SEQ2EXPdata","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SEQ2EXPdata is a Julia package for organizing biological sequence data and their associated expression labels. It is suitable for DNA, RNA, or protein sequence datasets, and helps keep your data consistent and analysis-ready.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The main component of this package is the SEQ2EXP_Dataset type, which stores:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Biological sequences as strings\nCorresponding expression labels (single values or multiple features per sequence)\nOptional feature names for multi-dimensional labels","category":"page"},{"location":"#Quick-Example","page":"Home","title":"Quick Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SEQ2EXPdata\n\n# Simple dataset with one label per sequence\nds = SEQ2EXP_Dataset([\"ATCG\", \"GGTA\"], [1.2, 3.4])\n\n# Dataset with multiple features and names\n# Note that the second dimension of the labels must always match the number of strings.\nds2 = SEQ2EXP_Dataset(\n    [\"ATCG\", \"GGTA\"],\n    [1.2 2.3; 3.4 4.5],\n    feature_names=[\"exp1\", \"exp2\"]\n)","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#SEQ2EXPdata.SEQ2EXPdata","page":"Home","title":"SEQ2EXPdata.SEQ2EXPdata","text":"SEQ2EXPdata\n\nA Julia package for handling biological sequence data and corresponding expression labels.\n\nProvides the SEQ2EXP_Dataset type and utility functions for validation and manipulation of sequence-expression datasets.\n\n\n\n\n\n","category":"module"},{"location":"#SEQ2EXPdata.SEQ2EXP_Dataset","page":"Home","title":"SEQ2EXPdata.SEQ2EXP_Dataset","text":"SEQ2EXP_Dataset{T<:Real}(strings, labels; feature_names=nothing)\n\nA container for biological sequence data and corresponding expression labels.\n\nArguments\n\nstrings::Vector{String}: Vector of biological sequences (all must be the same length).\nlabels::Union{Vector{T}, Matrix{T}}: Expression labels for each sequence. Can be a vector (single label per sequence) or a matrix (multiple labels per sequence).\nfeature_names::Union{Vector{String}, Nothing}: Optional names for each feature (column) in labels.\n\nExamples\n\nds = SEQ2EXP_Dataset([\"ATCG\", \"GGTA\"], [1.2, 3.4])\nds2 = SEQ2EXP_Dataset([\"ATCG\", \"GGTA\"], [1.2 2.3; 3.4 4.5], feature_names=[\"exp1\", \"exp2\"])\n\n\n\n\n\n","category":"type"},{"location":"#SEQ2EXPdata.get_consensus-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.get_consensus","text":"get_consensus(ds::SEQ2EXP_Dataset) -> String\n\nGet the consensus sequence from the dataset. Throws an error if no consensus exists.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.get_consensus-Tuple{Vector{String}}","page":"Home","title":"SEQ2EXPdata.get_consensus","text":"get_consensus(strings::Vector{String}) -> String\n\nCompute the consensus sequence from a vector of strings of equal length.\n\nFor each position, finds the most frequently occurring character and constructs the consensus sequence using these most common characters.\n\nArguments\n\nstrings::Vector{String}: Vector of strings, all must be the same length\n\nReturns\n\nString: Consensus sequence\n\nExamples\n\nstrings = [\"ATCG\", \"ACCG\", \"ATCA\"]\nconsensus = get_consensus(strings)\n# Returns \"ATCG\" (A-T-C-G are most frequent at positions 1-2-3-4)\n\nNote: \n\nIf multiple characters are equally frequent at a position, it will arbitrarily choose one.\nMake sure to run check_all_strings_same_length before using this function    to ensure all strings are of equal length.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.get_feature_counts-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.get_feature_counts","text":"get_feature_counts(dataset::SEQ2EXP_Dataset) -> Int\n\nReturn the number of features (columns) in the labels array.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.get_feature_names-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.get_feature_names","text":"get_feature_names(dataset::SEQ2EXP_Dataset) -> Union{Vector{String}, Nothing}\n\nGet the feature names from the dataset, or nothing if not provided.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.get_sequence_and_labels-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.get_sequence_and_labels","text":"get_sequence_and_labels(dataset::SEQ2EXP_Dataset) -> (Vector{String}, Union{Vector, Matrix})\n\nReturn the sequences and labels as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.get_sequence_length-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.get_sequence_length","text":"get_sequence_length(strings::Vector{String}) -> Int\n\nGet the length of the sequences in the dataset.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.has_consensus-Tuple{SEQ2EXP_Dataset}","page":"Home","title":"SEQ2EXPdata.has_consensus","text":"has_consensus(ds::SEQ2EXP_Dataset) -> Bool\n\nCheck if the dataset has a consensus sequence.\n\n\n\n\n\n","category":"method"},{"location":"#SEQ2EXPdata.@seq2exp","page":"Home","title":"SEQ2EXPdata.@seq2exp","text":"@seq2exp sequences labels [feature_names] [GET_CONSENSUS=false]\n\nA convenient macro for creating SEQ2EXP_Dataset instances with cleaner syntax.\n\nArguments\n\nsequences: Vector of biological sequences\nlabels: Vector or Matrix of expression values  \nfeature_names (optional): Vector of feature names\nGET_CONSENSUS (optional): Boolean flag to compute consensus sequence\n\nExamples\n\n# Simple case\nds1 = @seq2exp [\"ATCG\", \"GGTA\"] [1.2, 3.4]\n\n# With feature names\nds2 = @seq2exp [\"ATCG\", \"GGTA\"] [1.2 2.3; 3.4 4.5] [\"exp1\", \"exp2\"]\n\n# With consensus computation\nds3 = @seq2exp [\"ATCG\", \"ATCA\"] [1.0, 2.0] nothing GET_CONSENSUS=true\n\n\n\n\n\n","category":"macro"}]
}
